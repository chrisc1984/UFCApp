@page "/"
@inject HttpClient Http
@using UFCApp.Data
@using UFCApp.Models
@inject DataService dataService

<PageTitle>Standings</PageTitle>

<div class="standings-container">
    <h1 class="text-center mb-4">Standings</h1>

    @if (players == null || userPicks == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        var sortedStandings = players.OrderByDescending(d => d.Score).ToArray();  // Sort Data by Score in descending order

        <div class="table-container">
            <table class="table table-striped table-bordered">
                <thead class="thead-dark">
                    <tr>
                        <th>Name</th>
                        <th>Score</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var player in sortedStandings)
                    {
                        <tr>
                            <td>@player.Name</td>
                            <td>@player.Score</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    
         <div class="toggle-icon" @onclick="TogglePastEvents">
            <div class="icon-box">
                @if (isPastEventsVisible)
                {
                    <span>-</span> <!-- Minus icon when past events are visible -->
                }
                else
                {
                    <span>+</span> <!-- Plus icon when past events are hidden -->
                }
            </div>
            <span class="mr-2">View Past Events</span>
        </div>

        @if (isPastEventsVisible)
        {
            <div class="mt-3">
                @foreach (var e in pastEvents)
                {
                    <div class="card mb-3">
                        <div class="card-header">
                            UFC @e.Name
                        </div>
                        <div class="card-body">
                            <div class="table-container">
                                <table class="table table-bordered border-4">
                                    <thead>
                                        <tr>
                                            <th>Fighter 1</th>
                                            <th>Fighter 2</th>
                                            @foreach (var userPick in userPicks)
                                            {
                                                <th>@userPick.Name's Picks</th>
                                            }
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var fight in e.Fights)
                                        {
                                            <tr>
                                                <td>@fight.Fighter1Name [@fight.Fighter1Points]</td>
                                                <td>@fight.Fighter2Name [@fight.Fighter2Points]</td>
                                                @foreach (var userPick in userPicks)
                                                {
                                                    var userPickForFight = userPick.Picks.FirstOrDefault(p => p.FightId == fight.Id);
                                                    var correctPick = userPickForFight != default && userPickForFight.Pick == fight.Winner;
                                                    var applyStrikeThrough = !correctPick && fight.Winner != "TBD";
                                                    var fighterPoints = userPickForFight != default && userPickForFight.Pick == fight.Fighter1Name ? fight.Fighter1Points : fight.Fighter2Points;
                                                    if (String.IsNullOrEmpty(userPickForFight.Pick))
                                                    {
                                                        fighterPoints = 0;
                                                    }

                                                    <td style="@(applyStrikeThrough ? "text-decoration: line-through;" : (correctPick ? "background-color: rgba(0, 255, 0, 0.2);" : "background-color: transparent;"))">
                                                        @userPickForFight.Pick
                                                        @if (fight.Winner == "TBD" || !applyStrikeThrough)
                                                        {
                                                            @(" [")
                                                            @fighterPoints
                                                            @("]")
                                                        }
                                                    </td>
                                                }

                                            </tr>
                                        }
                                    </tbody>
                                    <tfoot>
                                        <tr>
                                            <td colspan="2">Total Points</td>
                                            @foreach (var userPick in userPicks)
                                            {
                                                var totalPointsForCorrectPicks =
                                                e.Fights
                                                .Where(fight => userPick.Picks.Any(p => p.FightId == fight.Id && p.Pick == fight.Winner && fight.Winner == fight.Fighter1Name))
                                                .Sum(fight => fight.Fighter1Points) +
                                                e.Fights
                                                .Where(fight => userPick.Picks.Any(p => p.FightId == fight.Id && p.Pick == fight.Winner && fight.Winner == fight.Fighter2Name))
                                                .Sum(fight => fight.Fighter2Points);
                                                <td>@totalPointsForCorrectPicks</td>
                                            }
                                        </tr>
                                    </tfoot>
                                </table>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    }
</div>

@code {
    private List<Player>? players;
    private List<Event>? pastEvents;
    private List<UserPicks>? userPicks;
    private bool isPastEventsVisible = false;

    protected override async Task OnInitializedAsync()
    {
        players = await dataService.GetPlayersAsync();
        pastEvents = await dataService.GetPastEvents();
        userPicks = await dataService.GetUserPicks();
    }

    private void TogglePastEvents()
    {
        isPastEventsVisible = !isPastEventsVisible;
    }
}
