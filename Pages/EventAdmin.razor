@page "/eventadmin"
@inject HttpClient Http
@inject NavigationManager Navigation
@using UFCApp.Data
@using UFCApp.Models
@inject DataService dataService

<PageTitle>Admin Event Manager</PageTitle>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <h2 class="text-center mb-4">Event Manager</h2>

            <div class="card mb-4">
                <div class="card-header">
                    Add Event
                </div>
                <div class="card-body">
                    <EditForm Model="@newEvent" OnValidSubmit="HandleValidSubmit" OnFieldChanged="HandleFieldChanged">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group">
                            <label for="eventName">Event Name:</label>
                            <InputText id="eventName" class="form-control" @bind-Value="newEvent.Name" />
                            <ValidationMessage For="() => newEvent.Name" />
                        </div>
                        <div class="form-group">
                            <label for="eventDate">Event Date:</label>
                            <InputDate id="eventDate" class="form-control" @bind-Value="newEvent.StartTime" />
                            <ValidationMessage For="() => newEvent.StartTime" />
                        </div>

                        <div class="table-responsive">
                            <table class="table table-bordered">
                                <thead>
                                    <tr>
                                        <th>Fighter 1</th>
                                        <th>Points</th>
                                        <th>Fighter 2</th>
                                        <th>Points</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var fight in newEvent.Fights)
                                    {
                                        <tr>
                                            <td><InputText class="form-control form-control-sm" @bind-Value="fight.Fighter1Name" @oninput="@(e => HandleFieldChanged())" /></td>
                                            <td><InputNumber class="form-control form-control-sm" @bind-Value="fight.Fighter1Points" @oninput="@(e => HandleFieldChanged())" /></td>
                                            <td><InputText class="form-control form-control-sm" @bind-Value="fight.Fighter2Name" @oninput="@(e => HandleFieldChanged())" /></td>
                                            <td><InputNumber class="form-control form-control-sm" @bind-Value="fight.Fighter2Points" @oninput="@(e => HandleFieldChanged())" /></td>
                                            <td>
                                                @if (newEvent.Fights.Count > 1)
                                                {
                                                    <button type="button" class="btn btn-danger btn-sm" @onclick="() => RemoveFight(fight)">-</button>
                                                }
                                            </td>
                                        </tr>
                                    }
                                    @if (newEvent.Fights.Count < 5)
                                    {
                                        <tr>
                                            <td colspan="4"></td>
                                            <td class="text-center">
                                                <button type="button" class="btn btn-primary btn-sm" @onclick="AddFight">+</button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <button type="submit" class="btn btn-success float-right" disabled="@(!CanAddEvent)">Add Event</button>
                    </EditForm>
                </div>
            </div>

            @if (pastEvents == null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                <h5 class="text-center mb-4">Past Events</h5>
                <div class="mt-3">
                    @foreach (var e in pastEvents)
                    {
                        <div class="card mb-3">
                            <div class="card-header">
                                UFC @e.Name
                            </div>
                            <div class="card-body">
                                <EditForm Model="@e" OnValidSubmit="() => HandleEventUpdate(e)">
                                    <DataAnnotationsValidator />
                                    <ValidationSummary />

                                    <div class="form-group">
                                        <label for="eventName">Event Name:</label>
                                        <InputText id="eventName" class="form-control" @bind-Value="e.Name" />
                                        <ValidationMessage For="() => e.Name" />
                                    </div>
                                    <div class="form-group">
                                        <label for="eventDate">Event Date:</label>
                                        <InputDate id="eventDate" class="form-control" @bind-Value="e.StartTime" />
                                        <ValidationMessage For="() => e.StartTime" />
                                    </div>

                                    <div class="table-responsive">
                                        <table class="table table-bordered">
                                            <thead>
                                                <tr>
                                                    <th>Fighter 1</th>
                                                    <th>Points</th>
                                                    <th>Fighter 2</th>
                                                    <th>Points</th>
                                                    <th>Winner </th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var fight in e.Fights)
                                                {
                                                    <tr>
                                                        <td><InputText class="form-control form-control-sm" @bind-Value="fight.Fighter1Name" /></td>
                                                        <td><InputNumber class="form-control form-control-sm" @bind-Value="fight.Fighter1Points" /></td>
                                                        <td><InputText class="form-control form-control-sm" @bind-Value="fight.Fighter2Name" /></td>
                                                        <td><InputNumber class="form-control form-control-sm" @bind-Value="fight.Fighter2Points" /></td>
                                                        <td><InputText class="form-control form-control-sm" @bind-Value="fight.Winner" /></td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>

                                    <div class="d-flex justify-content-end mt-2">
                                        <button type="submit" disabled="@isProcessing" class="btn btn-success">Save</button>
                                    </div>
                                </EditForm>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    private Event newEvent = new Event { StartTime = DateTime.Today, Fights = new List<Fight> { new Fight() } };
    private List<Event>? pastEvents;
    private bool isProcessing = false;

    private void AddFight()
    {
        if (newEvent.Fights.Count < 5)
        {
            newEvent.Fights.Add(new Fight());
            UpdateCanAddEvent();
        }
    }

    private void RemoveFight(Fight fight)
    {
        if (newEvent.Fights.Count > 1)
        {
            newEvent.Fights.Remove(fight);
            UpdateCanAddEvent();
        }
    }

    private bool CanAddEvent { get; set; }

    private void UpdateCanAddEvent()
    {
        CanAddEvent = !string.IsNullOrWhiteSpace(newEvent.Name) &&
                      newEvent.Fights.Count == 5 &&
                      newEvent.Fights.All(f => !string.IsNullOrWhiteSpace(f.Fighter1Name) &&
                                               !string.IsNullOrWhiteSpace(f.Fighter2Name) &&
                                               f.Fighter1Points != 0 &&
                                               f.Fighter2Points != 0);
    }

    private Task HandleFieldChanged()
    {
        UpdateCanAddEvent();
        return Task.CompletedTask;
    }

    private void TranformEventOdds(Event e)
    {
        foreach (var fight in e.Fights)
        {
            if (fight.Fighter1Points < 0 || fight.Fighter1Points > 10)
            {
                fight.Fighter1Points = ConvertOdds(fight.Fighter1Points);
            }

            if (fight.Fighter2Points < 0 || fight.Fighter2Points > 10)
            {
                fight.Fighter2Points = ConvertOdds(fight.Fighter2Points);
            }
        }     
    }

    private decimal ConvertOdds(decimal odds)
    {
        decimal impliedProbability;

        if (odds < 0) // Favourites
        {
            impliedProbability = -odds / (-odds + 100m);
        }
        else // Underdogs
        {
            impliedProbability = 100m / (odds + 100m);
        }

        // Convert implied probability to a score between 0 and 10
        decimal score = 10m - (impliedProbability * 10m);

        // Ensure the score is between 0 and 10
        score = Math.Max(0m, Math.Min(10m, score));

        // Round to 1 decimal place
        return Math.Round(score, 1);
    }

    private async Task HandleValidSubmit()
    {

        isProcessing = true;
        if (CanAddEvent)
        {
            //Add Event
            int newEventId = await dataService.AddEvent(newEvent);

            //Tranform Event Odds to 0 to 10 scale
            TranformEventOdds(newEvent);

            //Add Fights to Event
            List<int> newFightIds = await dataService.AddFights(newEvent.Fights, newEventId);

            //Add Empty User picks for each fight
            await dataService.AddEmptyUserPicks(newFightIds);

            newEvent = new Event { StartTime = DateTime.Today, Fights = new List<Fight> { new Fight() } };
            pastEvents = await dataService.GetPastEvents();
        }

        isProcessing = false;


    }

    private async Task HandleEventUpdate(Event e)
    {
        await dataService.UpdateEvent(e);
        await dataService.UpdateFights(e.Fights);
    }

    protected override async Task OnInitializedAsync()
    {
        pastEvents = await dataService.GetPastEvents();
        UpdateCanAddEvent();
    }
}
